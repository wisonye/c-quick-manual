* Data race - Mutex

** What is =Data race=

When multiple thread instances run the same function, and different function codes try to access or modify the shared data, it will cause a =Data Race=.

That's why you need to do something to protect the shared data (between threads) to prevent multi-threading data race bugs.

To prevent this, threading APIs offer synchronization primitives such as =mutexes= to lock data structures against concurrent access.


** How =Mutex= can help?

=Mutex= is used to protect shared resources across different threads, here is the regular pattern using mutex:

*** Create =Mutex= instance
  
#+BEGIN_SRC c
  #include <string.h>

  //
  // Create mutex instance, `NULL` means use default mutex attribute
  // to create mutex instance.
  //
  pthread_mutex_t mutex;
  pthread_mutex_init(&instance.internal_mutex, NULL);
#+END_SRC


*** Inside =Thread Function=, wrap the code inside the mutex lock, you have 2 options:

**** Option 1: Block until lock successfully
  
#+BEGIN_SRC c
  int lock_result = pthread_mutex_lock(&self->internal_mutex) ;
  if (lock_result == 0) {
      // ...
      // It's safe to read/write the protected shared resources here.
      // ...

      //
      // Make sure to release the mutex!!!
      //
      pthread_mutex_unlock(mutex);
  } else {
      printf("\n>>> Try lock mutex failed, error no: %d, error messge: %s",
             lock_result,
             strerror(lock_result));
  }
#+END_SRC


**** Option 2: Block until lock successfully or timeout

#+BEGIN_SRC c
  struct timespec timeout = {0};
  clock_gettime(CLOCK_REALTIME, &timeout);
  timeout.tv_nsec += 500 * 1'000'000; // e.g. wait for 500 milliseconds

  int lock_result = pthread_mutex_timedlock(&self->internal_mutex, &timeout);
  if (lock_result == 0) {
      // ...
      // It's safe to read/write the protected shared resources here.
      // ...

      //
      // Make sure to release the mutex!!!
      //
      pthread_mutex_unlock(mutex);
  } else {
      printf("\n>>> Try lock mutex failed, error no: %d, error messge: %s",
          lock_result,
          strerror(lock_result));
  }
#+END_SRC


*** Destroy it when you're done.

#+BEGIN_SRC c
  pthread_mutex_destroy(&mutex);
#+END_SRC


** One more thing about =Mutex=

=Mutex= focuses on correctness more than performance, as that's an exclusive lock no matter whether you only need to read or write!!!

If =more read less write= is your case, then you should use =ReadWriteLock= instead of =Mutex=.


** Example

Think about the following scenario:

A few people want to use the same copying machine to copy their documents.

You can imagine those different people just like different threads, they all want to access the same copying machine which is a shared resource between different threads. Because every "copy task" involves a few steps below:

- Open the cover
- Place the document that you want to copy
- Select a copy numbers
- Finally, press the button to run the copy process

Those steps must be handled by the same person, no one should engage during that process, otherwise, it won't work correctly.

That's exclusive protection, and you should use =Mutex= in that situation.

*** =copying_machine.h=:

#+BEGIN_SRC c
  #ifndef __COPYING_MACHINE_H__
  #define __COPYING_MACHINE_H__

  #include <errno.h>
  // `<pthread.h>` already included `<time.h>`
  #include <pthread.h>
  #include <stdint.h>
  #include <string.h>
  #include <unistd.h>

  #define LOG_SIZE 4
  #define LOG_MESSAGE_SIZE 100

  typedef uint8_t u8;
  typedef uintptr_t usize;

  typedef struct {
      char operation_log[LOG_SIZE][LOG_MESSAGE_SIZE];
      pthread_mutex_t internal_mutex;
      bool already_init_mutex;
  } CopyingMachine;

  CopyingMachine CM_init();
  void CM_deinit(CopyingMachine *self);
  void CM_make_copies(CopyingMachine *self,
                      const char *user_name,
                      const char *filename,
                      u8 copy_numbers);

  #ifdef COPYING_MACHINE_IMPLEMENTATION

      #include <string.h>

  ///
  ///
  ///
  CopyingMachine CM_init() {
      // CopyingMachine instance = {0};
      CopyingMachine instance = (CopyingMachine){
          .operation_log = {0},
          .already_init_mutex = false,
      };
      if (pthread_mutex_init(&instance.internal_mutex, NULL) == 0) {
          instance.already_init_mutex = true;
      }

      return instance;
  }

  ///
  ///
  ///
  void CM_deinit(CopyingMachine *self) {
      if (self->already_init_mutex) {
          pthread_mutex_destroy(&self->internal_mutex);
          self->already_init_mutex = false;
      }
  }

  ///
  ///
  ///
  void CM_make_copies(CopyingMachine *self,
                      const char *user_name,
                      const char *copy_filename,
                      u8 copy_numbers) {
      char log_message[LOG_MESSAGE_SIZE] = {0};

          int lock_result = pthread_mutex_lock(&self->internal_mutex) ;
      if (lock_result == 0) {
          //
          // Step 1: Clear operation log
          //
          memset(self->operation_log, 0, sizeof(self->operation_log));

          //
          // Step 2: Open cover
          //
          snprintf(log_message,
                   sizeof(log_message),
                   "'%s' is opening the cover",
                   user_name);
          memcpy(&self->operation_log[0][0], log_message, strlen(log_message));
          usleep(100 * 1000);

          //
          // Step 3: Place copy file
          //
          snprintf(log_message,
                   sizeof(log_message),
                   "'%s' is placing the copy file: %s",
                   user_name,
                   copy_filename);
          memcpy(&self->operation_log[1][0], log_message, strlen(log_message));
          usleep(100 * 1000);

          //
          // Step 4: Select copy numvers
          //
          snprintf(log_message,
                   sizeof(log_message),
                   "'%s' is selecting the copy numbers: %d",
                   user_name,
                   copy_numbers);
          memcpy(&self->operation_log[2][0], log_message, strlen(log_message));
          usleep(100 * 1000);

          //
          // Step 5: Make copies
          //
          snprintf(log_message,
                   sizeof(log_message),
                   "'%s''s task is processing: Making %d copies from '%s'",
                   user_name,
                   copy_numbers,
                   copy_filename);
          memcpy(&self->operation_log[3][0], log_message, strlen(log_message));
          usleep(100 * 1000);

          //
          // Step 6: Print operation logs
          //
          printf("\n>>> [ Copying Machine ] - Operation Logs: ");
          for (usize index = 0; index < LOG_SIZE; index++) {
              printf("\n>>> \t%s", &self->operation_log[index][0]);
          }
          printf("\n>>> \tDone.");

          pthread_mutex_unlock(&self->internal_mutex);
      } else {
          printf("\n>>> Try lock mutex failed, error no: %d, error messge: %s",
                 lock_result,
                 strerror(lock_result));
      }
  }

  ///
  ///
  ///
  void CM_make_copies_v2(CopyingMachine *self,
                         const char *user_name,
                         const char *copy_filename,
                         u8 copy_numbers) {
      char log_message[LOG_MESSAGE_SIZE] = {0};

      //
      // Try to acquire lock with a given timeout settings
      //
      struct timespec timeout = {0};
      clock_gettime(CLOCK_REALTIME, &timeout);
      timeout.tv_nsec += 500 * 1'000'000;

      int lock_result = pthread_mutex_timedlock(&self->internal_mutex, &timeout);
      if (lock_result == 0) {
          //
          // Step 1: Clear operation log
          //
          memset(self->operation_log, 0, sizeof(self->operation_log));

          //
          // Step 2: Open cover
          //
          snprintf(log_message,
                   sizeof(log_message),
                   "'%s' is opening the cover",
                   user_name);
          memcpy(&self->operation_log[0][0], log_message, strlen(log_message));
          usleep(100 * 1000);

          //
          // Step 3: Place copy file
          //
          snprintf(log_message,
                   sizeof(log_message),
                   "'%s' is placing the copy file: %s",
                   user_name,
                   copy_filename);
          memcpy(&self->operation_log[1][0], log_message, strlen(log_message));
          usleep(100 * 1000);

          //
          // Step 4: Select copy numvers
          //
          snprintf(log_message,
                   sizeof(log_message),
                   "'%s' is selecting the copy numbers: %d",
                   user_name,
                   copy_numbers);
          memcpy(&self->operation_log[2][0], log_message, strlen(log_message));
          usleep(100 * 1000);

          //
          // Step 5: Make copies
          //
          snprintf(log_message,
                   sizeof(log_message),
                   "'%s''s task is processing: Making %d copies from '%s'",
                   user_name,
                   copy_numbers,
                   copy_filename);
          memcpy(&self->operation_log[3][0], log_message, strlen(log_message));
          usleep(100 * 1000);

          //
          // Step 6: Print operation logs
          //
          printf("\n>>> [ Copying Machine ] - Operation Logs: ");
          for (usize index = 0; index < LOG_SIZE; index++) {
              printf("\n>>> \t%s", &self->operation_log[index][0]);
          }
          printf("\n>>> \tDone.");

          pthread_mutex_unlock(&self->internal_mutex);
      } else {
          printf("\n>>> Try lock mutex failed, error no: %d, error messge: %s",
                 lock_result,
                 strerror(lock_result));
      }
  }

  #endif

  #endif
#+END_SRC


*** =copying_machine_test.c=:

#+BEGIN_SRC c
  #include <pthread.h>
  #include <stdio.h>

  #define COPYING_MACHINE_IMPLEMENTATION
  #include "copying_machine.h"

  #define TP_TEST_THREAD_COUNT 5

  ///
  /// Thread function state
  ///
  typedef struct {
      const char *user_name;
      const char *copy_filename;
      u8 copy_numbers;

      CopyingMachine *cm;
  } CopyingTask;

  ///
  /// Thread funciton must take a `*void` as parameter and return a `*void`
  ///
  void *make_copies(void *state) {
      CopyingTask *ct = (CopyingTask *)state;

      CM_make_copies(ct->cm, ct->user_name, ct->copy_filename, ct->copy_numbers);
      // CM_make_copies_v2(ct->cm, ct->user_name, ct->copy_filename, ct->copy_numbers);

      return NULL;
  }

  ///
  ///
  ///
  int main(void) {
      CopyingMachine cm = CM_init();

      //
      // Threads and init thread attribute
      //
      pthread_t threads[TP_TEST_THREAD_COUNT] = {0};
      pthread_attr_t thread_attr = {0};
      if (pthread_attr_init(&thread_attr) != 0) {
          perror("\n>>> Init thread attribute failed: ");

          CM_deinit(&cm);
          return -1;
      }

      //
      // Create a few copying tasks
      //
      CopyingTask copying_task[5] = {(CopyingTask){
                                         .user_name = "Wison",
                                         .copy_filename = "123.pdf",
                                         .copy_numbers = 5,
                                         .cm = &cm,
                                     },
                                     (CopyingTask){
                                         .user_name = "Fion",
                                         .copy_filename = "234.pdf",
                                         .copy_numbers = 6,
                                         .cm = &cm,
                                     },
                                     (CopyingTask){
                                         .user_name = "Paul",
                                         .copy_filename = "456.pdf",
                                         .copy_numbers = 7,
                                         .cm = &cm,
                                     },
                                     (CopyingTask){
                                         .user_name = "Wison",
                                         .copy_filename = "789.pdf",
                                         .copy_numbers = 8,
                                         .cm = &cm,
                                     },
                                     (CopyingTask){
                                         .user_name = "David",
                                         .copy_filename = "910.pdf",
                                         .copy_numbers = 9,
                                         .cm = &cm,
                                     }};

      //
      // Create new threads
      //
      for (int index = 0; index < TP_TEST_THREAD_COUNT; index++) {
          int create_result = pthread_create(
              //
              // Pointer to `pthread *`
              //
              &threads[index],
              //
              // Pointer to `pthread_attr *`
              //
              // You also can pass `NULL` here for using the default thread
              // attribute
              //
              &thread_attr,
              //
              // Share thread funciton
              //
              make_copies,
              //
              // Parameter that passes into the thread function
              //
              (void *)&copying_task[index]);

          if (create_result != 0) {
              fprintf(stderr, "Failed to create thread with index: %d", index);
          }
      }

      //
      // Once a thread has been created, the thread attribute is no
      // longer needed, destroy it
      //
      pthread_attr_destroy(&thread_attr);

      printf("\n>>> [ main ] - All threads should be running in background.");

      //
      // Wait for all threads to finish
      //
      for (int index = 0; index < TP_TEST_THREAD_COUNT; index++) {
          int join_result = pthread_join(threads[index], NULL);

          if (join_result != 0) {
              fprintf(stderr, "Failed to join thread with index: %d", index);
          }
      }

      printf("\n>>> [ main ] - Done.");

      //
      // Make sure to `deinit`!!!
      //
      CM_deinit(&cm);
  }
#+END_SRC


*** Test result output:

**** ~CM_make_copies(ct->cm, ct->user_name, ct->copy_filename, ct->copy_numbers);~ version output:

#+BEGIN_SRC bash
  >>> [ main ] - All threads should be running in background.
  >>> [ Copying Machine ] - Operation Logs: 
  >>> 	'Wison' is opening the cover
  >>> 	'Wison' is placing the copy file: 123.pdf
  >>> 	'Wison' is selecting the copy numbers: 5
  >>> 	'Wison''s task is processing: Making 5 copies from '123.pdf'
  >>> 	Done.
  >>> [ Copying Machine ] - Operation Logs: 
  >>> 	'Fion' is opening the cover
  >>> 	'Fion' is placing the copy file: 234.pdf
  >>> 	'Fion' is selecting the copy numbers: 6
  >>> 	'Fion''s task is processing: Making 6 copies from '234.pdf'
  >>> 	Done.
  >>> [ Copying Machine ] - Operation Logs: 
  >>> 	'Paul' is opening the cover
  >>> 	'Paul' is placing the copy file: 456.pdf
  >>> 	'Paul' is selecting the copy numbers: 7
  >>> 	'Paul''s task is processing: Making 7 copies from '456.pdf'
  >>> 	Done.
  >>> [ Copying Machine ] - Operation Logs: 
  >>> 	'Wison' is opening the cover
  >>> 	'Wison' is placing the copy file: 789.pdf
  >>> 	'Wison' is selecting the copy numbers: 8
  >>> 	'Wison''s task is processing: Making 8 copies from '789.pdf'
  >>> 	Done.
  >>> [ Copying Machine ] - Operation Logs: 
  >>> 	'David' is opening the cover
  >>> 	'David' is placing the copy file: 910.pdf
  >>> 	'David' is selecting the copy numbers: 9
  >>> 	'David''s task is processing: Making 9 copies from '910.pdf'
  >>> 	Done.
  >>> [ main ] - Done.
#+END_SRC


**** ~CM_make_copies_v2(ct->cm, ct->user_name, ct->copy_filename, ct->copy_numbers);~ version output:

#+BEGIN_SRC bash
  >>> [ main ] - All threads should be running in background.
  >>> [ Copying Machine ] - Operation Logs: 
  >>> 	'Wison' is opening the cover
  >>> 	'Wison' is placing the copy file: 123.pdf
  >>> 	'Wison' is selecting the copy numbers: 5
  >>> 	'Wison''s task is processing: Making 5 copies from '123.pdf'
  >>> 	Done.
  >>> Try lock mutex failed, error no: 60, error messge: Operation timed out
  >>> Try lock mutex failed, error no: 60, error messge: Operation timed out
  >>> Try lock mutex failed, error no: 60, error messge: Operation timed out
  >>> [ Copying Machine ] - Operation Logs: 
  >>> 	'Fion' is opening the cover
  >>> 	'Fion' is placing the copy file: 234.pdf
  >>> 	'Fion' is selecting the copy numbers: 6
  >>> 	'Fion''s task is processing: Making 6 copies from '234.pdf'
  >>> 	Done.
  >>> [ main ] - Done.
#+END_SRC
