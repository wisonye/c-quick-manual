* Create new thread and wait for it to finish

~pthread_create~: Creates a new thread of execution. It returns =0= if succeeded.

~pthread_join~: Causes the calling thread to wait for the termination of the specified thread. It returns =0= if succeeded.


#+BEGIN_SRC c
  #include <pthread.h>
  #include <stdio.h>

  #define TP_TEST_THREAD_COUNT 5

  typedef struct {
      int value;
      int result;
  } TaskData;

  ///
  /// Thread funciton must take a `*void` as parameter and return a `*void`
  ///
  void *my_task(void *state) {
      int data = ((TaskData *)state)->value;

      printf("\n>>> [ task ] - task %d is running......", data);
      printf("\n>>> [ task ] - task %d is done.", data);

      // Update result
      ((TaskData *)state)->result = data + 10;

      return NULL;
  }

  ///
  ///
  ///
  int main(void) {
      //
      // typedef struct	pthread			*pthread_t;
      //
      pthread_t threads[TP_TEST_THREAD_COUNT] = {0};

      //
      // typedef struct	pthread_attr		*pthread_attr_t;
      //
      pthread_attr_t thread_attrs[TP_TEST_THREAD_COUNT] = {0};

      //
      // Task data that will be passed into thread function
      //
      TaskData task_data[TP_TEST_THREAD_COUNT] = {0};

      for (int index = 0; index < TP_TEST_THREAD_COUNT; index++) {
          //
          // Save thread function parameter
          //
          task_data[index].value = index + 1;

          //
          // Create new threads
          //
          int create_result = pthread_create(
              //
              // Pointer to `pthread *`
              //
              &threads[index],
              //
              // Pointer to `pthread_attr *`
              //
              &thread_attrs[index],
              //
              // Share thread funciton
              //
              my_task,
              //
              // Parameter that passes into the thread function
              //
              (void *)&task_data[index]);

          if (create_result != 0) {
              fprintf(stderr,
                      "Failed to create thread with parameter: %d",
                      task_data[index].value);
          }
      }

      printf("\n>>> [ main ] - All threads should be running in background.");

      //
      // Wait for the result
      //
      for (int index = 0; index < TP_TEST_THREAD_COUNT; index++) {
          int join_result = pthread_join(threads[index], NULL);

          if (join_result != 0) {
              fprintf(stderr,
                      "Failed to join thread with parameter: %d",
                      task_data[index].value);
          } else {
              printf("\n>>> [ main ] - Task %d result: %d",
                     task_data[index].value,
                     task_data[index].result);
          }
      }

      printf("\n>>> [ main ] - Done.");
  }
#+END_SRC


Compile and run (make sure you link to =libpthread=):

#+BEGIN_SRC bash
  clang -pedantic-errors -ansi -Wextra -Wall -Werror -std=gnu2x -lm -lpthread -o ./main src/main.c && ./main

  # >>> [ task ] - task 3 is running......
  # >>> [ task ] - task 3 is done.
  # >>> [ task ] - task 1 is running......
  # >>> [ task ] - task 1 is done.
  # >>> [ task ] - task 2 is running......
  # >>> [ task ] - task 2 is done.
  # >>> [ task ] - task 5 is running......
  # >>> [ task ] - task 5 is done.
  # >>> [ main ] - All threads should be running in background.
  # >>> [ main ] - Task 1 result: 11
  # >>> [ main ] - Task 2 result: 12
  # >>> [ main ] - Task 3 result: 13
  # >>> [ task ] - task 4 is running......
  # >>> [ task ] - task 4 is done.
  # >>> [ main ] - Task 4 result: 14
  # >>> [ main ] - Task 5 result: 15
  # >>> [ main ] - Done.
#+END_SRC
