* String format

Detail description: [[https://en.cppreference.com/w/c/io/fprintf][printf]]

** Format float value with the given decimals

~%.Xf~: =X= is the decimals count

#+BEGIN_SRC c
  float f1 = 8.3456;
  double d1= 7.123456;
      printf("\n>>> f1: %.3f", f1);
      printf("\n>>> d1: %.3f", d1);
#+END_SRC

#+BEGIN_SRC bash
  >>> f1: 8.346
  >>> d1: 7.123
#+END_SRC


** Format pointer

~%p~

#+BEGIN_SRC c
  int a    = 10;
  int *ptr = &a;
  printf("\n>>> ptr: %p", (void *)ptr);
#+END_SRC

#+BEGIN_SRC bash
  >>> ptr: 0x820f311f4
#+END_SRC


** Format binary

- ~%b~
- ~%B~

- ~%08b~

    - ~b~ output integer value in binary notation
    - ~0~ means the fill char
    - ~8~ means the width (how many chars to fill with fill char)

#+BEGIN_SRC c
  int a    = 4;
  printf("\n>>> a: 0b%04b", a);
  printf("\n>>> a: 0B%08B", a);
#+END_SRC

#+BEGIN_SRC bash
  >>> a: 0b0100
  >>> a: 0B00000100
#+END_SRC


** Format HEX

- ~%x~ (lowercase) or ~%X~ (uppercase)

- ~%02X~: fixed width
    - ~0~ means the fill char
    - ~2~ means the width (how many chars to fill with fill char)

#+BEGIN_SRC c
  unsigned char unsigned_char_v   = 0x0A;
  unsigned short unsigned_short_v = 0x0123;

  printf("\n>>> unsigned_char_v: 0x%02X", unsigned_char_v);
  printf("\n>>> unsigned_short_v: 0x%06X", unsigned_short_v);
#+END_SRC

#+BEGIN_SRC bash
  >>> unsigned_char_v: 0x0A
  >>> unsigned_short_v: 0x000123
#+END_SRC


** Format to the given buffer

~snprintf~

#+BEGIN_SRC c
  //
  // Buffer accepts max 9 chars + '\0'
  //
  char buffer[10] = {0};

  //
  // Copy a larger string into buffer, it will be truncated,
  // and you don't need to put the '\0' at the correct position,
  // as `buffer` has been initialized with all zeros.
  //
  snprintf(buffer, sizeof(buffer), "1234567890ABCDEF");

  printf("\n>>> buffer: %s, len: %zu", buffer, strlen(buffer));
#+END_SRC

#+BEGIN_SRC bash
  >>> buffer: 123456789, len: 9
#+END_SRC


** Format pointer address to uppercase HEX

#+BEGIN_SRC c
  ///
  /// Return the given pointer address in uppercase HEX.
  ///
  /// Return type is `char[19]`, that's because:
  /// - Ponter size is maximum 8 bytes on 64bit
  /// - 2bytes for the `0x` prefix
  /// - 1byte for the endding '\0'
  ///
  typedef struct {
      char address[19];
  } PtrAddressUppercase;

  PtrAddressUppercase ptr_address_uppercase(void *ptr) {
      PtrAddressUppercase ptr_uppercase = {0};
      snprintf(ptr_uppercase.address,
               sizeof(ptr_uppercase.address),
               "%p",
               (void *)ptr);
      ptr_uppercase.address[18] = '\0';
      for (size_t index = 2; ptr_uppercase.address[index] != '\0' && index < 18;
           index++) {
          ptr_uppercase.address[index] = toupper(ptr_uppercase.address[index]);
      }

      return ptr_uppercase;
  }

  int main(void) {
        int int_value = 99;
        printf("\n>>> int_value address: %s", ptr_address_uppercase(&int_value).address);
  }
#+END_SRC


Output:

#+BEGIN_SRC bash
  >>> int_value address: 0x820792D0C
#+END_SRC
