* clang-format

** How to format your source code

The first thing first, you need to create a =.clang-format= in the project root folder, then =LSP= is able to use that to run =clang-format= to format your source code.

Or you can do that manually like this:

#+BEGIN_SRC bash
  #
  # Format all source files and output to stdout (not affect the files)
  #
  clang-format src/*

  #
  # Format all source files and save
  #
  clang-format -i src/*
#+END_SRC

Keep that in mind: If =src/*= includes directories, it will stop!!!

So, given a following folder structures, you will do that step-by-step:

#+BEGIN_SRC bash
  # ├── src
  # │   ├── main.c
  # │   ├── main_test.c
  # │   └── multi-threading
  # │       ├── copying_machine.h
  # │       ├── copying_machine_test.c
  # │       ├── thread_pool.c
  # │       └── thread_pool.h

  clang-format -i src/*.c
  clang-format -i src/multi-threading
#+END_SRC


** My =.clang-format=

#+BEGIN_SRC conf
  #---------------------------------------------------------------------------
  #
  # Detail options: https://clang.llvm.org/docs/ClangFormatStyleOptions.html
  #
  #---------------------------------------------------------------------------

  ---
  # `BaseOnStyle` options:
  # `LLVM` A style complying with the LLVM coding standards
  #
  # `Google` A style complying with Google’s C++ style guide
  #
  # `Chromium` A style complying with Chromium’s style guide
  #
  # `Mozilla` A style complying with Mozilla’s style guide
  #
  # `WebKit` A style complying with WebKit’s style guide
  #
  # `Microsoft` A style complying with Microsoft’s style guide
  #
  # `GNU` A style complying with the GNU coding standards
  BasedOnStyle: Google
  ColumnLimit: 80
  IndentWidth: 4
  PPIndentWidth: 4

  #
  # Macro alignment rleated
  #
  IndentPPDirectives: BeforeHash
  # IndentPPDirectives: AfterHash
  AlignConsecutiveMacros:
    Enabled: true
    AcrossEmptyLines: true
    AcrossComments: true
  AlignEscapedNewlines: Right

  #
  # Operrands alignment related
  #
  AlignOperands: Align

  #
  # Trailing comments alignment related
  #
  AlignTrailingComments:
    Kind: Always
    OverEmptyLines: 1

  #
  # String alignment related
  #
  AlwaysBreakBeforeMultilineStrings: false

  #
  # Varialbe assignment alignment related
  #
  AlignConsecutiveAssignments:
    Enabled: true
    AcrossEmptyLines: false
    AcrossComments: false

  # AlignConsecutiveDeclarations:
  #   Enabled: true
  #   AcrossEmptyLines: true
  #   AcrossComments: false

  #
  # Function signature and call alignment related
  #
  AlignAfterOpenBracket: Align
  # AlignAfterOpenBracket: AlwaysBreak
  AllowAllArgumentsOnNextLine: false
  AllowAllParametersOfDeclarationOnNextLine: false
  AllowShortFunctionsOnASingleLine: Inline
  BinPackArguments: false
  BinPackParameters: false


  #
  # Switch case alignment related
  #
  AllowShortCaseLabelsOnASingleLine: true
#+END_SRC
