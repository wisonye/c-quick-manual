* How to do simple logging

The following logging functions come from the [[https://github.com/wisonye/cbuild.git][cbuild]] repo (with terminal color output support):

#+BEGIN_SRC c
  ///
  /// Log related
  ///
  #include <stdarg.h>
  #include <stdio.h>

  #define LOG_COLOR_GREEN      "\033[1;32m"
  #define LOG_COLOR_YELLOW     "\033[1;33m"
  #define LOG_COLOR_RED        "\033[1;31m"
  #define LOG_COLOR_DEFAULT    "\033[1;32m"
  #define LOG_COLOR_PURPLE     "\033[1;35m"
  #define LOG_COLOR_GRAY_WHITE "\033[1;37m"
  #define LOG_COLOR_RESET      "\033[0m"

  void CB_log(FILE *fd,
              const char *color,
              const char *prefix,
              const char *fmt,
              va_list args) {
      // fprintf(fd, ">>> %s[ %s ] %s- ", color, prefix, LOG_COLOR_RESET);
      fprintf(fd, "%s[ %s ] %s- ", color, prefix, LOG_COLOR_RESET);
      vfprintf(fd, fmt, args);
      fprintf(fd, "\n");
  }

  void CB_debug(const char *prefix, const char *fmt, ...) {
      // #ifdef ENABLE_DEBUG_LOG
      va_list args;
      va_start(args, fmt);
      CB_log(stdout, LOG_COLOR_GRAY_WHITE, prefix, fmt, args);
      va_end(args);
      // #endif
  }

  void CB_info(const char *prefix, const char *fmt, ...) {
      va_list args;
      va_start(args, fmt);
      CB_log(stdout, LOG_COLOR_GREEN, prefix, fmt, args);
      va_end(args);
  }
  void CB_warn(const char *prefix, const char *fmt, ...) {
      va_list args;
      va_start(args, fmt);
      CB_log(stdout, LOG_COLOR_YELLOW, prefix, fmt, args);
      va_end(args);
  }

  void CB_error(const char *prefix, const char *fmt, ...) {
      va_list args;
      va_start(args, fmt);
      CB_log(stdout, LOG_COLOR_RED, prefix, fmt, args);
      va_end(args);
  }

  void CB_panic(const char *prefix, const char *fmt, ...) {
      va_list args;
      va_start(args, fmt);
      CB_log(stdout, LOG_COLOR_PURPLE, prefix, fmt, args);
      va_end(args);
      exit(1);
  }
#+END_SRC


Example:

#+BEGIN_SRC c
  int main(void) {
      CB_debug("BUILD_EXECUTABLE","Start to buidling executable (%s) with the following source "
               "files:\n\t%s,\n\t%s\n\t%s",
               "build/main",
               "src/util.c",
               "src/build_tool.c",
               "src/main.c");

      CB_info("BUILD_EXECUTABLE",
              "Build successfully, generated executable: %s",
              "build/main");

      CB_error("BUILD_EXECUTABLE",
               "Fail to buidling executable (%s) with the following source "
               "files:\n\t%s,\n\t%s\n\t%s",
               "build/main",
               "src/util.c",
               "src/build_tool.c",
               "src/main.c");

      /* CB_panic("BUILD_EXECUTABLE", */
      /*          "Error happened: %s" */
      /*          "'src/test.c' - File not found!!!"); */

      return 0;

  }
#+END_SRC


Output:

#+BEGIN_SRC bash
  [ BUILD_EXECUTABLE ] - Start to buidling executable (build/main) with the following source files:
          src/util.c,
          src/build_tool.c
          src/main.c
  [ BUILD_EXECUTABLE ] - Build successfully, generated executable: build/main
  [ BUILD_EXECUTABLE ] - Fail to buidling executable (build/main) with the following source files:
          src/util.c,
          src/build_tool.c
          src/main.c
#+END_SRC
